// const { Middleware } = require('swagger-express-middleware');
import http from 'http'
import fs from 'fs'
import path from 'path'
import swaggerUI, { JsonObject } from 'swagger-ui-express'
import yaml from 'js-yaml'
import express, { Express } from 'express'
import cors from 'cors'
import cookieParser from 'cookie-parser'
import bodyParser from 'body-parser'
import * as OpenApiValidator from 'express-openapi-validator'
import logger from './logger'
import config from './config'

class ExpressServer {
    port: number
    app: Express
    openApiPath: string
    schema: JsonObject
    server: unknown // TODO: ?

    constructor(port: number, openApiYaml: string) {
        this.port = port
        this.app = express()
        this.openApiPath = openApiYaml
        try {
            this.schema = yaml.load(
                fs.readFileSync(openApiYaml, 'utf8'),
            ) as JsonObject
        } catch (error) {
            logger.error({
                message: 'failed to convert openApiYaml to JsonSchema',
                error,
            })
        }

        this.setupMiddleware()
    }

    setupMiddleware() {
        // this.setupAllowedMedia();
        this.app.use(cors())
        this.app.use(bodyParser.json({ limit: '14MB' }))
        this.app.use(express.json())
        this.app.use(express.urlencoded({ extended: false }))
        this.app.use(cookieParser())
        //
        // View the openapi document in a visual interface. Should be able to test from this page
        //
        this.app.use('/api-doc', swaggerUI.serve, swaggerUI.setup(this.schema))

        this.simpleTest()
    }

    simpleTest() {
        //
        // Simple test to see that the server is up and responding
        //
        this.app.get('/hello', (req, res) =>
            res.send(`Hello World. path: ${this.openApiPath}`),
        )
        //
        // Send the openapi document *AS GENERATED BY THE GENERATOR*
        //
        this.app.get('/openapi', (req, res) =>
            res.sendFile(path.join(__dirname, 'api', 'openapi.yaml')),
        )
        this.app.get('/login-redirect', (req, res) => {
            res.status(200)
            res.json(req.query)
        })
        this.app.get('/oauth2-redirect.html', (req, res) => {
            res.status(200)
            res.json(req.query)
        })
    }

    launch() {
        //
        // validate request and response data structure
        //
        this.app.use(
            OpenApiValidator.middleware({
                apiSpec: this.openApiPath,
                operationHandlers: path.join(__dirname),
                fileUploader: { dest: config.FILE_UPLOAD_PATH },
                validateResponses: true, // <-- to validate responses
            }),
        )
        //
        // error handle
        //
        this.app.use((err, req, res, next) => {
            const status = err.status || 500
            if (status === 500)
                logger.error({ message: 'global handle error', error: err })
            //
            // format errors
            //
            res.status(status).json({
                message: err.message || err,
                errors: err.errors || '',
            })
        })

        http.createServer(this.app).listen(this.port)
        logger.info(`Listening on port ${this.port}`)
    }

    async close() {
        // TODO: server 哪里来?
        if (this.server !== undefined) {
            // @ts-ignore
            await this.server.close()
            logger.info(`Server on port ${this.port} shut down`)
        }
    }
}

export default ExpressServer
